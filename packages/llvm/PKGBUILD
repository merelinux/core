#!/bin/bash
# shellcheck disable=SC2034,SC2154,SC2068,SC2086

pkgname=(llvm llvm-dev libLLVM libclang libcxx libunwind)
_ver_major=17
pkgver=${_ver_major}.0.6
pkgrel=1
pkgdesc='A collection of modular and reusable compiler and toolchain technologies.'
arch=('x86_64')
url='htps://llvm.org'
license=(Apache)
groups=()
depends=()
makedepends=(
    cmake
    git
    ninja
    utmps-dev
    zlib-ng-dev
)
options=()
changelog=ChangeLog

source=(
    "https://github.com/llvm/llvm-project/releases/download/llvmorg-${pkgver}/llvm-project-${pkgver}.src.tar.xz"
)

sha256sums=(
    58a8818c60e6627064f312dbf46c02d9949956558340938b71cf731ad8bc0813
)

_binfiles=(
        usr/bin/addr2line
        usr/bin/ar
        usr/bin/c++
        usr/bin/cc
        usr/bin/clang
        usr/bin/clang++
        "usr/bin/clang-${_ver_major}"
        usr/bin/clang-cl
        usr/bin/clang-cpp
        usr/bin/ld.lld
        usr/bin/ld64.lld
        usr/bin/lld
        usr/bin/lld-link
        usr/bin/llvm-ar
        usr/bin/llvm-nm
        usr/bin/llvm-objcopy
        usr/bin/llvm-objdump
        usr/bin/llvm-readobj
        usr/bin/llvm-size
        usr/bin/llvm-strings
        usr/bin/llvm-strip
        usr/bin/llvm-symbolizer
        usr/bin/nm
        usr/bin/objcopy
        usr/bin/objdump
        usr/bin/ranlib
        usr/bin/readelf
        usr/bin/size
        usr/bin/strings
        usr/bin/strip
        usr/bin/wasm-ld
)


build() {
    cd_unpacked_src
    sed -i \
        -e 's@strtoull_l@strtoull@g' \
        -e '/strtoull/s@, _LIBCPP_GET_C_LOCALE@@' \
        -e 's@strtoll_l@strtoll@g' \
        -e '/strtoll/s@, _LIBCPP_GET_C_LOCALE@@' \
        libcxx/include/locale
    sed -i "/dlfcn.h/s@\$@\n#include <sys/types.h>@" \
        compiler-rt/lib/fuzzer/FuzzerInterceptors.cpp
    install -d build
    cd build || return 1
    unset CFLAGS CXXFLAGS LDFLAGS
    CFLAGS='-Wno-gnu-line-marker' \
    CXXFLAGS='-Wno-gnu-line-marker' \
    ln -sf ld.lld /usr/bin/ld
    cmake -G Ninja -Wno-dev \
        -DCMAKE_BUILD_TYPE=Release \
        -DCLANG_BUILD_EXAMPLES=OFF \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCLANG_DEFAULT_CXX_STDLIB='libc++' \
        -DCLANG_DEFAULT_RTLIB='compiler-rt' \
        -DCLANG_ENABLE_BOOTSTRAP=ON \
        -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
        -DCOMPILER_RT_BUILD_XRAY=OFF \
        -DCOMPILER_RT_USE_LIBCXX=ON \
        -DLIBCLANG_BUILD_STATIC=ON \
        -DLIBCXX_HAS_MUSL_LIBC=ON \
        -DLIBCXX_USE_COMPILER_RT=ON \
        -DLIBCXXABI_USE_COMPILER_RT=ON \
        -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
        -DLLVM_BUILD_EXAMPLES=OFF \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_DEFAULT_TARGET_TRIPLE="$CHOST" \
        -DLLVM_ENABLE_LIBCXX=ON \
        -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_ENABLE_PROJECTS='lld;clang;compiler-rt' \
        -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi;libunwind' \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_TERMINFO=OFF \
        -DLLVM_HOST_TRIPLE="$CHOST" \
        -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
        ../llvm
    ninja -j "$((nproc * nodes * 2))"
}

package_llvm() {
    pkgfiles=(
        "${_binfiles[@]}"
        usr/include/c++
        usr/include/"$CHOST"
        usr/include/llvm-c/lto.h
        usr/lib/libLTO.so
        usr/lib/libc++.a
        usr/lib/libc++.so
        usr/lib/libc++abi.a
        usr/lib/libc++abi.so
        usr/lib/libc++experimental.a
        usr/lib/libclang.so
        usr/lib/libgcc_s.a
        usr/lib/libgcc_s.so
        usr/lib/libunwind.a
        usr/lib/libunwind.so
        usr/lib/"$CHOST"/libc++.a
        usr/lib/"$CHOST"/libc++.so
        usr/lib/"$CHOST"/libc++abi.a
        usr/lib/"$CHOST"/libc++abi.so
        usr/lib/"$CHOST"/libc++experimental.a
        usr/lib/"$CHOST"/libunwind.a
        usr/lib/"$CHOST"/libunwind.so
        usr/lib/clang
    )
    depends=(
        "ld-musl-$(arch).so.1"
        libc++.so.1
        libc++abi.so.1
        libunwind.so.1
        libz.so.1
        mold
        musl-dev
    )
    provides=(
        "libLTO.so.${_ver_major}"
    )
    groups=(build-base)
    cd_unpacked_src
    cd build || return 1
    export DESTDIR="${pkgdirbase}/dest"
    cmake --build . --target install
    cd "$DESTDIR" || return 1
    find "usr/lib/${CHOST}/" ! -type d | while read -r file; do
        bn="${file##*/}"
        ln -s "${CHOST}/${bn}" "usr/lib/${bn}"
    done
    ln -s clang usr/bin/cc
    ln -s clang++ usr/bin/c++
    ln -s libunwind.a usr/lib/libgcc_s.a
    ln -s libunwind.so.1.0 usr/lib/libgcc_s.so.1.0
    ln -s libgcc_s.so.1.0 usr/lib/libgcc_s.so.1
    ln -s libgcc_s.so.1.0 usr/lib/libgcc_s.so
    package_defined_files
}

package_llvm-dev() {
    pkgfiles=(
        usr/bin/llvm-config
        usr/libexec
        usr/lib/libclang*.a
        usr/lib/liblld*.a
        usr/lib/libLLVM*
        usr/lib/cmake
        usr/lib/libear
        usr/lib/libscanbuild
        usr/include/lld
        usr/include/llvm
        usr/include/llvm-c
        usr/include/clang*
        usr/share/clang
        usr/share/scan*
        usr/share/opt-viewer
    )
    depends=(
        "ld-musl-$(arch).so.1"
        libc++.so.1
        libc++abi.so.1
        libunwind.so.1
        libz.so.1
        "llvm=${pkgver}"
        "libLLVM=${pkgver}"
        "libclang=${pkgver}"
        "libcxx=${pkgver}"
        "libunwind=${pkgver}"
    )
    std_split_package
    rm "${pkgdir}/usr/include/llvm-c/lto.h"
    find "${pkgdir}/usr/lib/" -name "libLLVM-${_ver_major}*so" -delete
}

package_libLLVM() {
    pkgfiles=(
        "usr/lib/libLLVM-${_ver_major}*so"
    )
    depends=(
        "ld-musl-$(arch).so.1"
        libc++.so.1
        libc++abi.so.1
        libunwind.so.1
        libz.so.1
    )
    provides=(
        "libLLVM-${_ver_major}.so"
    )
    std_split_package
}

package_libclang() {
    pkgfiles=(
        usr/lib/libclang.so.*
    )
    depends=(
        "ld-musl-$(arch).so.1"
        libc++.so.1
        libc++abi.so.1
        libunwind.so.1
        libz.so.1
    )
    provides=(
        "libclang.so.${_ver_major}"
    )
    std_split_package
}


package_libcxx() {
    pkgfiles=(
        usr/lib/libc++.so.*
        usr/lib/libc++abi.so.*
        usr/lib/"$CHOST"/libc++.so.*
        usr/lib/"$CHOST"/libc++abi.so.*
    )
    depends=(
        "ld-musl-$(arch).so.1"
        libunwind.so.1
    )
    replaces=(
        llvm-runtime-libs
    )
    provides=(
        libc++.so.1
        libc++abi.so.1
    )
    std_split_package
}

package_libunwind() {
    pkgfiles=(
        usr/lib/libgcc_s.so.*
        usr/lib/libunwind.so.*
        usr/lib/"$CHOST"/libunwind.so.*
    )
    depends=(
        "ld-musl-$(arch).so.1"
    )
    provides=(
        libgcc_s.so.1
        libunwind.so.1
    )
    std_split_package
}
